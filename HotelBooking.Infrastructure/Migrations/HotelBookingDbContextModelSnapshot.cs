// <auto-generated />
using System;
using HotelBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBooking.Infrastructure.Migrations
{
    [DbContext(typeof(HotelBookingDbContext))]
    partial class HotelBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.Property<int>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomTypesRoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesRoomTypeId");

                    b.HasIndex("RoomTypesRoomTypeId");

                    b.ToTable("AmenityRoomType");

                    b.HasData(
                        new
                        {
                            AmenitiesId = 1,
                            RoomTypesRoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1")
                        },
                        new
                        {
                            AmenitiesId = 1,
                            RoomTypesRoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68")
                        },
                        new
                        {
                            AmenitiesId = 1,
                            RoomTypesRoomTypeId = new Guid("4b4c0ea5-0b9a-4a20-8ad9-77441fb912d2")
                        },
                        new
                        {
                            AmenitiesId = 2,
                            RoomTypesRoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1")
                        },
                        new
                        {
                            AmenitiesId = 2,
                            RoomTypesRoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68")
                        },
                        new
                        {
                            AmenitiesId = 3,
                            RoomTypesRoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1")
                        },
                        new
                        {
                            AmenitiesId = 3,
                            RoomTypesRoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68")
                        });
                });

            modelBuilder.Entity("BookingRoom", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("BookingRoom");

                    b.HasData(
                        new
                        {
                            BookingsId = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            RoomsId = new Guid("a98b8a9d-4c5a-4a90-a2d2-5f1441b93db6")
                        },
                        new
                        {
                            BookingsId = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            RoomsId = new Guid("4e1cb3d9-bc3b-4997-a3d5-0c56cf17fe7a")
                        },
                        new
                        {
                            BookingsId = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            RoomsId = new Guid("c6898b7e-ee09-4b36-8b20-22e8c2a63e29")
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-speed internet access",
                            Name = "Free Wi-Fi",
                            Price = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Outdoor swimming pool",
                            Name = "Swimming Pool",
                            Price = 50
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fully equipped fitness center",
                            Name = "Gym",
                            Price = 30
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CheckInDate");

                    b.HasIndex("CheckOutDate");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", t =>
                        {
                            t.HasCheckConstraint("CK_Booking_CheckInDate", "CheckInDate >= GETDATE()");

                            t.HasCheckConstraint("CK_Booking_CheckOutDate", "CheckOutDate > CheckInDate");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            BookingDate = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 100.0,
                            UserId = new Guid("af838868-a3e8-47d0-b1a3-8111396dda35")
                        },
                        new
                        {
                            Id = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            BookingDate = new DateTime(2024, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 150.0,
                            UserId = new Guid("b748f5b2-6b48-4e5d-9e4b-c5bfa54cb1f2")
                        },
                        new
                        {
                            Id = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            BookingDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckInDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 200.0,
                            UserId = new Guid("af838868-a3e8-47d0-b1a3-8111396dda35")
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2f87e1e-3cf0-4c3e-b09b-bb2d8e5b74b9"),
                            CountryName = "Palestine",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jenin",
                            PostOffice = "JJJ"
                        },
                        new
                        {
                            Id = new Guid("b1f8b3e4-4e30-4c6b-8c4f-2c9c9de7d517"),
                            CountryName = "Jordan",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amman",
                            PostOffice = "AAA"
                        },
                        new
                        {
                            Id = new Guid("4a7d5f20-8b3d-4b9c-b9b6-ecb2bbd25e3c"),
                            CountryName = "Gaza",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gaza",
                            PostOffice = "GGG"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1aebf1a-5c85-4e54-81a7-2b59c3d1d3b8"),
                            DiscountPercentage = 10f,
                            FromDate = new DateTime(2024, 8, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            RoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1"),
                            ToDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("b3f70a88-53e5-4b35-9d08-59632cfaf872"),
                            DiscountPercentage = 15f,
                            FromDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            RoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68"),
                            ToDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = new Guid("c6d14b29-1d59-42ab-b13f-15d5939e4ae4"),
                            DiscountPercentage = 20f,
                            FromDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            RoomTypeId = new Guid("4b4c0ea5-0b9a-4a20-8ad9-77441fb912d2"),
                            ToDate = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Hotels", t =>
                        {
                            t.HasCheckConstraint("CK_Hotel_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4a5d378-6a32-4b7e-917f-51c5798e6b54"),
                            Category = "Luxury",
                            CityId = new Guid("c2f87e1e-3cf0-4c3e-b09b-bb2d8e5b74b9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice Hotel",
                            Name = "Cinema",
                            NumberOfRooms = 100,
                            OwnerId = new Guid("4b72f22b-4a11-44d0-a62d-8a5c5cf3e7a1"),
                            PhoneNumber = "0599999999",
                            Rating = 4f,
                            StreetAddress = "Mahata Street"
                        },
                        new
                        {
                            Id = new Guid("b8f4d9a7-73e9-4536-890e-71f1f9cfe9f2"),
                            Category = "Boutique",
                            CityId = new Guid("b1f8b3e4-4e30-4c6b-8c4f-2c9c9de7d517"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nice Hotel with differnet types of amenities",
                            Name = "Asaaf Hotel",
                            NumberOfRooms = 200,
                            OwnerId = new Guid("4b72f22b-4a11-44d0-a62d-8a5c5cf3e7a1"),
                            PhoneNumber = "0599539898",
                            Rating = 3f,
                            StreetAddress = "qusoor"
                        },
                        new
                        {
                            Id = new Guid("9a0d6e3b-5d48-489e-a9f2-743c0fcd83b1"),
                            Category = "Budget",
                            CityId = new Guid("4a7d5f20-8b3d-4b9c-b9b6-ecb2bbd25e3c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "with sea",
                            Name = "Gaza Hotel",
                            NumberOfRooms = 250,
                            OwnerId = new Guid("9e4bfc5f-65a4-4f92-a5e6-45d7d58b90cb"),
                            PhoneNumber = "0598234183",
                            Rating = 4f,
                            StreetAddress = "90 Road"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HotelId");

                    b.ToTable("Images", t =>
                        {
                            t.HasCheckConstraint("CK_Image_HotelOrCity", "[HotelId] IS NULL AND [CityId] IS NOT NULL OR [HotelId] IS NOT NULL AND [CityId] IS NULL");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("812f6324-fb7a-486b-9823-8718fa3a76f4"),
                            Format = "Jpg",
                            HotelId = new Guid("e4a5d378-6a32-4b7e-917f-51c5798e6b54"),
                            OwnerType = "Hotel",
                            Type = "Gallery",
                            Url = "https://aabhariindia.com/assets/image/9.jpg"
                        },
                        new
                        {
                            Id = new Guid("86bcc156-b0e9-42c3-bc6c-84a483bce329"),
                            Format = "Jpg",
                            HotelId = new Guid("b8f4d9a7-73e9-4536-890e-71f1f9cfe9f2"),
                            OwnerType = "Hotel",
                            Type = "Thumbnail",
                            Url = "https://images.pexels.com/photos/189296/pexels-photo-189296.jpeg?cs=srgb&dl=pexels-donaldtong94-189296.jpg&fm=jpg"
                        },
                        new
                        {
                            Id = new Guid("9a7f1bdc-fcd4-46f9-ac32-f8f12d3415a7"),
                            Format = "Jpg",
                            HotelId = new Guid("9a0d6e3b-5d48-489e-a9f2-743c0fcd83b1"),
                            OwnerType = "Hotel",
                            Type = "Gallery",
                            Url = "https://watermark.lovepik.com/photo/20211123/large/lovepik-malaysia-luxury-resort-hotel-picture_500865089.jpg"
                        },
                        new
                        {
                            Id = new Guid("8edf1cc5-8e1c-46e7-8d36-692b87e30b61"),
                            CityId = new Guid("c2f87e1e-3cf0-4c3e-b09b-bb2d8e5b74b9"),
                            Format = "Png",
                            OwnerType = "City",
                            Type = "Thumbnail",
                            Url = "https://example.com/image2.png"
                        },
                        new
                        {
                            Id = new Guid("5b326737-9b37-4cce-a7ee-62a6f0b34bcf"),
                            CityId = new Guid("b1f8b3e4-4e30-4c6b-8c4f-2c9c9de7d517"),
                            Format = "Png",
                            OwnerType = "City",
                            Type = "Thumbnail",
                            Url = "https://example.com/image4.png"
                        },
                        new
                        {
                            Id = new Guid("2bef1b9a-9347-4785-80c8-9be5e7fd6827"),
                            CityId = new Guid("4a7d5f20-8b3d-4b9c-b9b6-ecb2bbd25e3c"),
                            Format = "Png",
                            OwnerType = "City",
                            Type = "Gallery",
                            Url = "https://example.com/image5.png"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b72f22b-4a11-44d0-a62d-8a5c5cf3e7a1"),
                            Email = "zaid2001@gmail.com",
                            FirstName = "Zaid",
                            LastName = "Ali",
                            PhoneNumber = "0569451796"
                        },
                        new
                        {
                            Id = new Guid("9e4bfc5f-65a4-4f92-a5e6-45d7d58b90cb"),
                            Email = "rawan2000@gmail.com",
                            FirstName = "Rawan",
                            LastName = "Ibraheem",
                            PhoneNumber = "05999359292"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("Method");

                    b.HasIndex("Status");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2e6f4a9-8a7c-4b9e-8f2b-2c7c9d6a3b5e"),
                            Amount = 100.0,
                            BookingId = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            Method = "CreditCard",
                            Status = "Completed"
                        },
                        new
                        {
                            Id = new Guid("e3f7d5b9-9a8e-4b9e-9d2b-3c8d0e7c4f6e"),
                            Amount = 150.0,
                            BookingId = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            Method = "MobileWallet",
                            Status = "Pending"
                        },
                        new
                        {
                            Id = new Guid("f4a8e6c9-0b9d-4b9f-9d3c-4c9e1f8d5a7f"),
                            Amount = 200.0,
                            BookingId = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            Method = "Cash",
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7b8e7c9-1c9d-4f9f-9f3e-5d0e1f9d6a7f"),
                            BookingId = new Guid("7d3155a2-95f8-4d9b-bc24-662ae053f1c9"),
                            Comment = "Very nice experience, highly recommended!",
                            Rating = 4f,
                            ReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6c9f7a9-0d9f-4e9d-8e4c-6d1e2f8e7c9d"),
                            BookingId = new Guid("efeb3d13-3dab-46c9-aa9a-9f22dd58e06e"),
                            Comment = "Good service but could be improved.",
                            Rating = 3f,
                            ReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5b9e8c9-2e9f-4d9c-8f5d-7e2e3f8f9d0e"),
                            BookingId = new Guid("0bf4a177-98b8-4f67-8a56-95669c320890"),
                            Comment = "Outstanding experience! Will come back again.",
                            Rating = 5f,
                            ReviewDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultsCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid?>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasCheckConstraint("CK_Review_RatingRange", "[Rating] >= 0 AND [Rating] <= 5")
                                .HasName("CK_Review_RatingRange1");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("a98b8a9d-4c5a-4a90-a2d2-5f1441b93db6"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("e4a5d378-6a32-4b7e-917f-51c5798e6b54"),
                            Rating = 4.5,
                            RoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1")
                        },
                        new
                        {
                            Id = new Guid("4e1cb3d9-bc3b-4997-a3d5-0c56cf17fe7a"),
                            AdultsCapacity = 3,
                            ChildrenCapacity = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("b8f4d9a7-73e9-4536-890e-71f1f9cfe9f2"),
                            Rating = 4.1999998092651367,
                            RoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68")
                        },
                        new
                        {
                            Id = new Guid("c6898b7e-ee09-4b36-8b20-22e8c2a63e29"),
                            AdultsCapacity = 4,
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("b8f4d9a7-73e9-4536-890e-71f1f9cfe9f2"),
                            Rating = 4.8000001907348633,
                            RoomTypeId = new Guid("4b4c0ea5-0b9a-4a20-8ad9-77441fb912d2")
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.RoomType", b =>
                {
                    b.Property<Guid>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PricePerNight")
                        .HasColumnType("float");

                    b.HasKey("RoomTypeId");

                    b.HasIndex("Category");

                    b.ToTable("RoomTypes", t =>
                        {
                            t.HasCheckConstraint("CK_RoomType_PriceRange", "[PricePerNight] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            RoomTypeId = new Guid("5a5de3b8-3ed8-4f0a-bda9-cf73225a64a1"),
                            Category = "Suite",
                            PricePerNight = 100.0
                        },
                        new
                        {
                            RoomTypeId = new Guid("d67ddbe4-1f1a-4d85-bcc1-ec3a475ecb68"),
                            Category = "Deluxe",
                            PricePerNight = 150.0
                        },
                        new
                        {
                            RoomTypeId = new Guid("4b4c0ea5-0b9a-4a20-8ad9-77441fb912d2"),
                            Category = "Standard",
                            PricePerNight = 200.0
                        });
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af838868-a3e8-47d0-b1a3-8111396dda35"),
                            Email = "zaynassaf2001@gmail.com",
                            FirstName = "Zain",
                            LastName = "Assaf",
                            Password = "hashedpassword1",
                            PhoneNumber = "123-456-7890",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b748f5b2-6b48-4e5d-9e4b-c5bfa54cb1f2"),
                            Email = "leenhammad@example.com",
                            FirstName = "Leen",
                            LastName = "Hammad",
                            Password = "hashedpassword2",
                            PhoneNumber = "987-654-3210",
                            Role = "RegularUser"
                        });
                });

            modelBuilder.Entity("AmenityRoomType", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking.Domain.Entities.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesRoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingRoom", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Booking", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Discount", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Discounts")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelBooking.Domain.Entities.Owner", "Owner")
                        .WithMany("Hotels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Image", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.City", "City")
                        .WithMany("Images")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HotelBooking.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Images")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Payment", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("HotelBooking.Domain.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Review", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("HotelBooking.Domain.Entities.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Room", b =>
                {
                    b.HasOne("HotelBooking.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBooking.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.City", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.Owner", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelBooking.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
